Link :   https://leetcode.com/problems/house-robber/description/


class Solution {
public:

    int helper(vector<int> &nums,int n,vector<int>&dp){
        if(n==0){
            return nums[n];
        }
        if(n<0){
            return 0;
        }
        if(dp[n]!=-1){
            return dp[n];
        }
        int pick=nums[n]+helper(nums,n-2,dp);
        int notpick=helper(nums,n-1,dp);
        return dp[n]=max(pick,notpick);
    }

    int rob(vector<int>& nums) {
        int n=nums.size();
        vector<int> dp(n,-1);
        dp[0]=nums[0];        
        for(int i=1;i<n;i++){
            int pick=nums[i];
            if(i>1) pick+=dp[i-2];
            int notpick=dp[i-1];
            dp[i]=max(pick,notpick);
        }
        // return helper(nums,n-1,dp);
        return dp[n-1];
    }
};
